{"version":3,"sources":["../assets/scripts/lib/_ElementQueries.js","../assets/scripts/lib/_ResizeSensor.js"],"names":["ElementQueries","this","getEmSize","element","document","documentElement","fontSize","getComputedStyle","parseFloat","convertToPx","value","units","replace","clientWidth","clientHeight","vw","vh","chooser","Math","SetupInformation","options","key","option","actualValue","attrValues","attrValue","attrName","width","height","addOption","idx","mode","property","join","attributes","call","offsetWidth","offsetHeight","hasOwnProperty","indexOf","k","setAttribute","substr","removeAttribute","setupElement","elementQueriesSetupInformation","elementQueriesSensor","ResizeSensor","instance","withTracking","elements","push","queueQuery","selector","query","querySelectorAll","bind","$$","jQuery","i","j","length","extractQuery","css","match","smatch","regex","exec","readRules","rules","toLowerCase","type","selectorText","cssText","cssRules","init","styleSheets","e","name","update","detach","pop","console","log","domLoaded","callback","addEventListener","test","navigator","userAgent","DOMLoadTimer","setInterval","readyState","clearInterval","window","onload","attachEvent","EventQueue","q","add","ev","prop","currentStyle","getPropertyValue","style","attachResizeEvent","resized","resizedAttached","resizeSensor","createElement","className","styleChild","innerHTML","appendChild","fixed","absolute","position","lastWidth","lastHeight","expand","childNodes","expandChild","shrink","reset","scrollLeft","scrollWidth","scrollTop","scrollHeight","changed","addEvent","el","cb","onScroll","elementType","Object","prototype","toString","Elements","removeChild"],"mappings":"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","file":"element_queries.js","sourcesContent":["/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n;\n(function() {\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = this.ElementQueries = function() {\n\n        this.withTracking = false;\n        var elements = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = getComputedStyle(element, 'fontSize');\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var units = value.replace(/[0-9]*/, '');\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @constructor\n         */\n        function SetupInformation(element) {\n            this.element = element;\n            this.options = {};\n            var key, option, width = 0, height = 0, value, actualValue, attrValues, attrValue, attrName;\n\n            /**\n             * @param {Object} option {mode: 'min|max', property: 'width|height', value: '123px'}\n             */\n            this.addOption = function(option) {\n                var idx = [option.mode, option.property, option.value].join(',');\n                this.options[idx] = option;\n            };\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function() {\n                // extract current dimensions\n                width = this.element.offsetWidth;\n                height = this.element.offsetHeight;\n\n                attrValues = {};\n\n                for (key in this.options) {\n                    if (!this.options.hasOwnProperty(key)){\n                        continue;\n                    }\n                    option = this.options[key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property == 'width' ? width : height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode == 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode == 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' '+attrValues[attrName]+' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      options\n         */\n        function setupElement(element, options) {\n            if (element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation.addOption(options);\n            } else {\n                element.elementQueriesSetupInformation = new SetupInformation(element);\n                element.elementQueriesSetupInformation.addOption(options);\n                element.elementQueriesSensor = new ResizeSensor(element, function() {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n            element.elementQueriesSetupInformation.call();\n\n            if (ElementQueries.instance.withTracking && elements.indexOf(element) < 0) {\n                elements.push(element);\n            }\n        }\n\n        /**\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        function queueQuery(selector, mode, property, value) {\n            var query;\n            if (document.querySelectorAll) query = document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            var elements = query(selector);\n            for (var i = 0, j = elements.length; i < j; i++) {\n                setupElement(elements[i], {\n                    mode: mode,\n                    property: property,\n                    value: value\n                });\n            }\n        }\n\n        var regex = /,?([^,\\n]*?)\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]([^\\n\\s\\{]*?)/mgi;\n\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match;\n            var smatch;\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                if (5 < match.length) {\n                    smatch = match[1] || match[5] || smatch;\n                    queueQuery(smatch, match[2], match[3], match[4]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules) {\n            var selector = '';\n            if (!rules) {\n                return;\n            }\n            if ('string' === typeof rules) {\n                rules = rules.toLowerCase();\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n            } else {\n                for (var i = 0, j = rules.length; i < j; i++) {\n                    if (1 === rules[i].type) {\n                        selector = rules[i].selectorText || rules[i].cssText;\n                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n                            extractQuery(selector);\n                        }else if(-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n                            extractQuery(selector);\n                        }\n                    } else if (4 === rules[i].type) {\n                        readRules(rules[i].cssRules || rules[i].rules);\n                    }\n                }\n            }\n        }\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.init = function(withTracking) {\n            this.withTracking = withTracking;\n            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n                try {\n                    readRules(document.styleSheets[i].cssText || document.styleSheets[i].cssRules || document.styleSheets[i].rules);\n                } catch(e) {\n                    if (e.name !== 'SecurityError') {\n                        throw e;\n                    }\n                }\n            }\n        };\n\n        /**\n         *\n         * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n         *                               (no garbage collection possible if you don not call .detach() first)\n         */\n        this.update = function(withTracking) {\n            this.withTracking = withTracking;\n            this.init();\n        };\n\n        this.detach = function() {\n            if (!this.withTracking) {\n                throw 'withTracking is not enabled. We can not detach elements since we don not store it.' +\n                'Use ElementQueries.withTracking = true; before domready.';\n            }\n\n            var element;\n            while (element = elements.pop()) {\n                ElementQueries.detach(element);\n            }\n\n            elements = [];\n        };\n    };\n\n    /**\n     *\n     * @param {Boolean} withTracking allows and requires you to use detach, since we store internally all used elements\n     *                               (no garbage collection possible if you don not call .detach() first)\n     */\n    ElementQueries.update = function(withTracking) {\n        ElementQueries.instance.update(withTracking);\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function(element) {\n        if (element.elementQueriesSetupInformation) {\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n            console.log('detached');\n        } else {\n            console.log('detached already', element);\n        }\n    };\n\n    ElementQueries.withTracking = false;\n\n    ElementQueries.init = function() {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init(ElementQueries.withTracking);\n    };\n\n    var domLoaded = function (callback) {\n        /* Internet Explorer */\n        /*@cc_on\n        @if (@_win32 || @_win64)\n            document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n            document.getElementById('ieScriptLoad').onreadystatechange = function() {\n                if (this.readyState == 'complete') {\n                    callback();\n                }\n            };\n        @end @*/\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        window.onload = callback;\n    };\n\n    if (window.addEventListener) {\n        window.addEventListener('load', ElementQueries.init, false);\n    } else {\n        window.attachEvent('onload', ElementQueries.init);\n    }\n    domLoaded(ElementQueries.init);\n\n})();\n","/**\r\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\r\n * directory of this distribution and at\r\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\r\n */\r\n;\r\n(function() {\r\n\r\n    /**\r\n     * Class for dimension change detection.\r\n     *\r\n     * @param {Element|Element[]|Elements|jQuery} element\r\n     * @param {Function} callback\r\n     *\r\n     * @constructor\r\n     */\r\n    this.ResizeSensor = function(element, callback) {\r\n        /**\r\n         *\r\n         * @constructor\r\n         */\r\n        function EventQueue() {\r\n            this.q = [];\r\n            this.add = function(ev) {\r\n                this.q.push(ev);\r\n            };\r\n\r\n            var i, j;\r\n            this.call = function() {\r\n                for (i = 0, j = this.q.length; i < j; i++) {\r\n                    this.q[i].call();\r\n                }\r\n            };\r\n        }\r\n\r\n        /**\r\n         * @param {HTMLElement} element\r\n         * @param {String}      prop\r\n         * @returns {String|Number}\r\n         */\r\n        function getComputedStyle(element, prop) {\r\n            if (element.currentStyle) {\r\n                return element.currentStyle[prop];\r\n            } else if (window.getComputedStyle) {\r\n                return window.getComputedStyle(element, null).getPropertyValue(prop);\r\n            } else {\r\n                return element.style[prop];\r\n            }\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {HTMLElement} element\r\n         * @param {Function}    resized\r\n         */\r\n        function attachResizeEvent(element, resized) {\r\n            if (!element.resizedAttached) {\r\n                element.resizedAttached = new EventQueue();\r\n                element.resizedAttached.add(resized);\r\n            } else if (element.resizedAttached) {\r\n                element.resizedAttached.add(resized);\r\n                return;\r\n            }\r\n\r\n            element.resizeSensor = document.createElement('div');\r\n            element.resizeSensor.className = 'resize-sensor';\r\n            var style = 'position: absolute; left: 0; top: 0; right: 0; bottom: 0; overflow: scroll; z-index: -1; visibility: hidden;';\r\n            var styleChild = 'position: absolute; left: 0; top: 0;';\r\n\r\n            element.resizeSensor.style.cssText = style;\r\n            element.resizeSensor.innerHTML =\r\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\r\n                    '<div style=\"' + styleChild + '\"></div>' +\r\n                '</div>' +\r\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\r\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\r\n                '</div>';\r\n            element.appendChild(element.resizeSensor);\r\n\r\n            if (!{fixed: 1, absolute: 1}[getComputedStyle(element, 'position')]) {\r\n                element.style.position = 'relative';\r\n            }\r\n\r\n            var expand = element.resizeSensor.childNodes[0];\r\n            var expandChild = expand.childNodes[0];\r\n            var shrink = element.resizeSensor.childNodes[1];\r\n            var shrinkChild = shrink.childNodes[0];\r\n\r\n            var lastWidth, lastHeight;\r\n\r\n            var reset = function() {\r\n                expandChild.style.width = expand.offsetWidth + 10 + 'px';\r\n                expandChild.style.height = expand.offsetHeight + 10 + 'px';\r\n                expand.scrollLeft = expand.scrollWidth;\r\n                expand.scrollTop = expand.scrollHeight;\r\n                shrink.scrollLeft = shrink.scrollWidth;\r\n                shrink.scrollTop = shrink.scrollHeight;\r\n                lastWidth = element.offsetWidth;\r\n                lastHeight = element.offsetHeight;\r\n            };\r\n\r\n            reset();\r\n\r\n            var changed = function() {\r\n                if (element.resizedAttached) {\r\n                    element.resizedAttached.call();\r\n                }\r\n            };\r\n\r\n            var addEvent = function(el, name, cb) {\r\n                if (el.attachEvent) {\r\n                    el.attachEvent('on' + name, cb);\r\n                } else {\r\n                    el.addEventListener(name, cb);\r\n                }\r\n            };\r\n\r\n            var onScroll = function() {\r\n              if (element.offsetWidth != lastWidth || element.offsetHeight != lastHeight) {\r\n                  changed();\r\n              }\r\n              reset();\r\n            }\r\n\r\n            addEvent(expand, 'scroll', onScroll);\r\n            addEvent(shrink, 'scroll', onScroll);\r\n        }\r\n\r\n        var elementType = Object.prototype.toString.call(element);\r\n        if ('[object Array]' === elementType\r\n            || ('[object NodeList]' === elementType)\r\n            || ('[object HTMLCollection]' === elementType)\r\n            || ('undefined' !== typeof jQuery && element instanceof jQuery) //jquery\r\n            || ('undefined' !== typeof Elements && element instanceof Elements) //mootools\r\n            ) {\r\n            var i = 0, j = element.length;\r\n            for (; i < j; i++) {\r\n                attachResizeEvent(element[i], callback);\r\n            }\r\n        } else {\r\n            attachResizeEvent(element, callback);\r\n        }\r\n\r\n        this.detach = function() {\r\n            ResizeSensor.detach(element);\r\n        };\r\n    };\r\n\r\n    this.ResizeSensor.detach = function(element) {\r\n        if (element.resizeSensor) {\r\n            element.removeChild(element.resizeSensor);\r\n            delete element.resizeSensor;\r\n            delete element.resizedAttached;\r\n        }\r\n    };\r\n\r\n})();\r\n"],"sourceRoot":"assets/scripts/"}